package database

import (
	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
	"log"
	"os"
	"project-stage-pfa/internals/models"
)

var DB *gorm.DB

func ConnectDB() {
	dbPath := "data/stages.db"

	// V√©rifie si la base existait d√©j√†
	_, err := os.Stat(dbPath)
	dbExisted := !os.IsNotExist(err)

	// Cr√©e le dossier si n√©cessaire
	if err := os.MkdirAll("data", os.ModePerm); err != nil {
		log.Fatal("Error lors de la creation du dossier data/ ", err)
	}

	// Ouvre ou cr√©e la base
	db, err := gorm.Open(sqlite.Open(dbPath), &gorm.Config{})
	if err != nil {
		log.Fatal("√âchec de la connexion √† la base de donn√©es SQLite :", err)
	}

	DB = db

	DB = db

	// Migration automatique des mod√®les
	err = db.AutoMigrate(
		&models.Utilisateur{},
		&models.Stagiaire{},
		&models.AssistanteChargeStage{},
		&models.DemandeStage{},
		&models.ThemeDeStage{},
		&models.Stage{},
		&models.Presence{},
		&models.ParrainDeStage{},
		&models.Encadrant{},
		&models.Attestation{},
	)
	if err != nil {
		log.Fatal("Erreur lors de la migration de la base :", err)
	}

	// Affiche info
	if dbExisted {
		log.Println("üìÇ Base de donn√©es SQLite existante ouverte.")

	} else {
		log.Println("üÜï Nouvelle base de donn√©es SQLite cr√©√©e.")
		SeedMockData()
		log.Println("üìÇ Base de donn√©es SQLite peupl√© avec donn√©es de test .")

	}

	log.Println("Connexion √† la base de donn√©es SQLite r√©ussie.")

}
